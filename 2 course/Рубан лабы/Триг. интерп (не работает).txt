import math

def fft(y_values):
    """
    Функция для выполнения преобразования Фурье.
    
    Параметры:
    y_values: list - список значений функции, для которой нужно выполнить преобразование Фурье.
    
    Возвращает:
    list: список коэффициентов А.
    """
    n = len(y_values)
    A = [0.0 + 0.0j] * n  # Инициализируем список комплексных чисел
    
    for j in range(n):
        for k in range(n):
            A[j] += y_values[k] * math.exp(-2 * math.pi * 1j * j * k / n)
    
    return A

def trig_interpolation(x, points):
    """
    Функция для вычисления тригонометрической интерполяции с использованием формулы.
    
    Параметры:
    x: float - значение, для которого нужно вычислить интерполяцию.
    points: list - список кортежей (x_i, y_i) - координаты точек, через которые проходит интерполяция.
    
    Возвращает:
    complex: значение интерполяции в точке x (комплексное число).
    """
    n = len(points)
    result = 0.0 + 0.0j  # Инициализируем результат как комплексное число
    
    # Вычисляем шаг интерполяции
    h = points[1][0] - points[0][0]
    
    # Вычисляем коэффициенты A_j с помощью преобразования Фурье
    y_values = [point[1] for point in points]
    A = fft(y_values)
    
    # Вычисляем значение интерполяции в точке x
    for j in range(n):
        result += A[j] * math.exp(2 * math.pi * 1j * j * ((x - points[0][0]) / h))
    
    return result

# Пример использования
if __name__ == "__main__":
    # Задаем точки для интерполяции
    points = [(0, 0), (math.pi / 4, 1), (math.pi / 2, 0), (3 * math.pi / 4, -1), (math.pi, 0)]
    
    # Выбираем точку для интерполяции
    x = math.pi / 3
    
    # Вычисляем интерполяцию
    interpolation = trig_interpolation(x, points)
    
    print(f"Значение интерполяции в точке x = {x} равно {interpolation}")
