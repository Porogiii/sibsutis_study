def divided_differences(x_values, y_values):
    n = len(x_values)
    F = [[None] * n for _ in range(n)]
    for i in range(n):
        F[i][0] = y_values[i]

    for j in range(1, n):
        for i in range(n - j):
            F[i][j] = (F[i + 1][j - 1] - F[i][j - 1]) / (x_values[i + j] - x_values[i])

    return F

def newton_interpolation(x, x_values, F):
    n = len(x_values)
    interpolation = F[0][0]
    for j in range(1, n):
        term = F[0][j]
        for i in range(j):
            term *= (x - x_values[i])
        interpolation += term
    return interpolation

# Пример использования:
x_values = [0, 1, 3, 4]
y_values = [1, 3, 4, 2]

# Рассчитываем таблицу разделённых разностей
F = divided_differences(x_values, y_values)

# Вычисляем значение интерполяционного многочлена Ньютона в точке x
x = 2.5
newton_result = newton_interpolation(x, x_values, F)
print("Интерполяционный многочлен Ньютона в точке", x, ":", newton_result)
