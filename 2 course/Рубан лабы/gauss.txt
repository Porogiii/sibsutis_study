from fractions import Fraction

def read_matrix_from_file(file_name):
    matrix = []
    with open(file_name, 'r') as file:
        for line in file:
            row = [Fraction(x) for x in line.split()]
            matrix.append(row)
    return matrix

def print_matrix(matrix):
    for row in matrix:
        print(" ".join(f"{elem.numerator}/{elem.denominator}" for elem in row))

def gaussian_elimination(matrix):
    n = len(matrix)

    for i in range(n):
        # Find the maximum element in the column
        max_row = i
        for k in range(i+1, n):
            if abs(matrix[k][i]) > abs(matrix[max_row][i]):
                max_row = k

        # Swap the maximum row with current row
        matrix[i], matrix[max_row] = matrix[max_row], matrix[i]

        # Make all rows below this one 0 in current column
        for k in range(i+1, n):
            factor = matrix[k][i] / matrix[i][i]
            for j in range(i, n+1):
                matrix[k][j] -= factor * matrix[i][j]

    # Back substitution
    x = [0] * n
    for i in range(n-1, -1, -1):
        x[i] = matrix[i][n] / matrix[i][i]
        for k in range(i-1, -1, -1):
            matrix[k][n] -= matrix[k][i] * x[i]
    return x

if __name__ == "__main__":
    file_name = "matrix.txt"
    matrix = read_matrix_from_file(file_name)
    print("Исходная матрица:")
    print_matrix(matrix)
    solution = gaussian_elimination(matrix)
    print("Решение:")
    print(" ".join(f"{elem.numerator}/{elem.denominator}" for elem in solution))
